#!csharp

string[] noms = { 
    "Docteur Moutarde", 
    "Sergent Pervenche", 
    "Professeur Leblanc", 
    "Colonel Olive", 
    "Monsieur Violet", 
    "Madame Legris", 
    "Mademoiselle Prunelle" 
};
var amis = new int[][]{
    new int[]{ 2, 5 },
    new int[]{ 0, 3, 4 },
    new int[]{ 0, 6 }, 
    Array.Empty<int>(), 
    new int[]{ 1, 6 }, 
    new int[]{ 3, 4 }, 
    new int[]{ 5 }
};
var victime = 2;

#!markdown

## Alternative aux boucles

#!csharp

var probas = new double[noms.Length];

for(int i=0; i<noms.Length; i++)
{
    probas[i] = Random.Shared.NextDouble();
} 
probas

#!csharp

probas = noms.Select(_ => Random.Shared.NextDouble()).ToArray()

#!csharp

double BonusAmi(int indice) => amis[victime].Contains(indice) ? .5 : 1;

record Suspect(string Nom, double Proba);

#!csharp

var suspects = new List<Suspect>();

for(var i=0; i<noms.Length; i++)
{
    if(i != victime)
    {
        suspects.Add(new Suspect(noms[i], probas[i] * BonusAmi(i)));
    }
}
suspects

#!csharp

suspects = noms
    .Select   ((nom, i) => (Nom: nom, Indice: i))
    .Where    ((_  , i) => i!=victime)
    .Select   (tuple => new Suspect(tuple.Nom, probas[tuple.Indice] * BonusAmi(tuple.Indice)))
    .ToList   ()

#!csharp

suspects.First(s => s.Proba == suspects.Max(s=>s.Proba))

#!csharp

suspects.Max(Comparer<Suspect>.Create((a, b) => a.Proba.CompareTo(b.Proba)))

#!markdown

## Bonus (hors vidéo)

#!csharp

record SuspectIndex(Suspect Suspect, int Index) : IComparable<SuspectIndex>
{
    public int CompareTo(SuspectIndex autre) => Suspect.Proba.CompareTo(autre.Suspect.Proba);
}
suspects.Select((s, i)=>new SuspectIndex(s, i)).Max()
